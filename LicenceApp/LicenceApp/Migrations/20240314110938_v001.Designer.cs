// <auto-generated />
using System;
using LicenceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LicenceApp.Migrations
{
    [DbContext(typeof(LicenceDBContext))]
    [Migration("20240314110938_v001")]
    partial class v001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LicenceApp.models.UserDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_FIRSTNAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_LASTNAME");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("U_PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("U_PASSWORD_SALT");

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("U_ROLE");

                    b.HasKey("Id");

                    b.ToTable("USERS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "sabrijm123@gmail.com",
                            FirstName = "sabri",
                            LastName = "jammoussi",
                            PasswordHash = new byte[] { 34, 77, 63, 43, 62, 226, 107, 108, 111, 57, 119, 95, 203, 12, 133, 69, 167, 133, 193, 216, 21, 221, 145, 234, 103, 227, 41, 194, 61, 197, 168, 101, 126, 31, 120, 186, 250, 125, 113, 108, 215, 44, 100, 110, 90, 159, 1, 245, 32, 166, 251, 94, 239, 106, 133, 95, 16, 36, 210, 99, 110, 75, 55, 214 },
                            PasswordSalt = new byte[] { 55, 156, 16, 166, 29, 68, 38, 188, 140, 40, 38, 186, 124, 229, 163, 80, 248, 214, 64, 61, 76, 102, 42, 62, 55, 6, 253, 34, 171, 241, 161, 33, 163, 224, 42, 130, 69, 5, 194, 39, 180, 245, 73, 202, 166, 248, 33, 209, 169, 104, 8, 248, 12, 107, 37, 2, 48, 239, 74, 90, 95, 146, 14, 156, 119, 90, 138, 126, 144, 111, 104, 178, 29, 96, 1, 220, 46, 80, 66, 180, 186, 28, 149, 132, 8, 29, 56, 32, 22, 22, 152, 163, 122, 235, 220, 86, 22, 207, 48, 175, 184, 147, 29, 221, 131, 105, 190, 200, 222, 6, 53, 88, 249, 147, 95, 211, 215, 74, 49, 8, 147, 250, 180, 195, 76, 168, 245, 38 },
                            Role = (short)0
                        });
                });

            modelBuilder.Entity("LicenceApp.models.clients.ClientDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_ADRESSE");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_CODE_POSTAL");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_EMAIL");

                    b.Property<int?>("Identifiant")
                        .HasMaxLength(13)
                        .HasColumnType("int")
                        .HasColumnName("U_IDENTIFIANT");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_PAYS");

                    b.Property<string>("RaisonSocial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_RAISON_SOCIAL");

                    b.Property<int>("Telephone")
                        .HasMaxLength(8)
                        .HasColumnType("int")
                        .HasColumnName("U_TELEPHONE");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_VILLE");

                    b.HasKey("Id");

                    b.ToTable("CLIENTS");
                });
#pragma warning restore 612, 618
        }
    }
}
