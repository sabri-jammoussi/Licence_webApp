using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LicenceApp.Migrations
{
    /// <inheritdoc />
    public partial class v002 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "USERS",
                keyColumn: "U_ID",
                keyValue: 1,
                columns: new[] { "U_PASSWORD_HASH", "U_PASSWORD_SALT" },
                values: new object[] { new byte[] { 131, 100, 13, 152, 215, 47, 250, 118, 95, 222, 139, 201, 92, 153, 118, 168, 174, 141, 119, 55, 115, 11, 198, 34, 150, 158, 19, 51, 235, 100, 216, 162, 192, 139, 37, 172, 46, 82, 93, 115, 108, 193, 182, 26, 104, 97, 167, 171, 144, 52, 234, 198, 208, 251, 20, 118, 175, 76, 107, 234, 213, 220, 13, 76 }, new byte[] { 103, 242, 113, 21, 247, 194, 114, 109, 140, 19, 115, 141, 126, 7, 112, 230, 87, 51, 213, 225, 150, 234, 12, 243, 249, 54, 188, 209, 171, 207, 131, 147, 205, 46, 117, 208, 53, 13, 118, 134, 176, 185, 92, 6, 34, 81, 62, 54, 180, 184, 242, 128, 68, 225, 100, 24, 203, 153, 40, 167, 96, 233, 84, 84, 217, 103, 243, 57, 7, 197, 198, 47, 208, 190, 247, 205, 195, 44, 53, 53, 57, 29, 158, 119, 29, 133, 185, 3, 54, 15, 10, 165, 135, 7, 184, 35, 57, 101, 79, 217, 221, 29, 21, 150, 109, 62, 59, 26, 103, 145, 109, 118, 87, 242, 72, 44, 31, 83, 3, 97, 53, 73, 65, 36, 55, 175, 10, 127 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "USERS",
                keyColumn: "U_ID",
                keyValue: 1,
                columns: new[] { "U_PASSWORD_HASH", "U_PASSWORD_SALT" },
                values: new object[] { new byte[] { 34, 77, 63, 43, 62, 226, 107, 108, 111, 57, 119, 95, 203, 12, 133, 69, 167, 133, 193, 216, 21, 221, 145, 234, 103, 227, 41, 194, 61, 197, 168, 101, 126, 31, 120, 186, 250, 125, 113, 108, 215, 44, 100, 110, 90, 159, 1, 245, 32, 166, 251, 94, 239, 106, 133, 95, 16, 36, 210, 99, 110, 75, 55, 214 }, new byte[] { 55, 156, 16, 166, 29, 68, 38, 188, 140, 40, 38, 186, 124, 229, 163, 80, 248, 214, 64, 61, 76, 102, 42, 62, 55, 6, 253, 34, 171, 241, 161, 33, 163, 224, 42, 130, 69, 5, 194, 39, 180, 245, 73, 202, 166, 248, 33, 209, 169, 104, 8, 248, 12, 107, 37, 2, 48, 239, 74, 90, 95, 146, 14, 156, 119, 90, 138, 126, 144, 111, 104, 178, 29, 96, 1, 220, 46, 80, 66, 180, 186, 28, 149, 132, 8, 29, 56, 32, 22, 22, 152, 163, 122, 235, 220, 86, 22, 207, 48, 175, 184, 147, 29, 221, 131, 105, 190, 200, 222, 6, 53, 88, 249, 147, 95, 211, 215, 74, 49, 8, 147, 250, 180, 195, 76, 168, 245, 38 } });
        }
    }
}
