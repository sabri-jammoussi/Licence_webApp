// <auto-generated />
using System;
using LicenceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LicenceApp.Migrations
{
    [DbContext(typeof(LicenceDBContext))]
    [Migration("20240314134908_v002")]
    partial class v002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LicenceApp.models.UserDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_FIRSTNAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_LASTNAME");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("U_PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("U_PASSWORD_SALT");

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("U_ROLE");

                    b.HasKey("Id");

                    b.ToTable("USERS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "sabrijm123@gmail.com",
                            FirstName = "sabri",
                            LastName = "jammoussi",
                            PasswordHash = new byte[] { 131, 100, 13, 152, 215, 47, 250, 118, 95, 222, 139, 201, 92, 153, 118, 168, 174, 141, 119, 55, 115, 11, 198, 34, 150, 158, 19, 51, 235, 100, 216, 162, 192, 139, 37, 172, 46, 82, 93, 115, 108, 193, 182, 26, 104, 97, 167, 171, 144, 52, 234, 198, 208, 251, 20, 118, 175, 76, 107, 234, 213, 220, 13, 76 },
                            PasswordSalt = new byte[] { 103, 242, 113, 21, 247, 194, 114, 109, 140, 19, 115, 141, 126, 7, 112, 230, 87, 51, 213, 225, 150, 234, 12, 243, 249, 54, 188, 209, 171, 207, 131, 147, 205, 46, 117, 208, 53, 13, 118, 134, 176, 185, 92, 6, 34, 81, 62, 54, 180, 184, 242, 128, 68, 225, 100, 24, 203, 153, 40, 167, 96, 233, 84, 84, 217, 103, 243, 57, 7, 197, 198, 47, 208, 190, 247, 205, 195, 44, 53, 53, 57, 29, 158, 119, 29, 133, 185, 3, 54, 15, 10, 165, 135, 7, 184, 35, 57, 101, 79, 217, 221, 29, 21, 150, 109, 62, 59, 26, 103, 145, 109, 118, 87, 242, 72, 44, 31, 83, 3, 97, 53, 73, 65, 36, 55, 175, 10, 127 },
                            Role = (short)0
                        });
                });

            modelBuilder.Entity("LicenceApp.models.clients.ClientDao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_ADRESSE");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_CODE_POSTAL");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_EMAIL");

                    b.Property<int?>("Identifiant")
                        .HasMaxLength(13)
                        .HasColumnType("int")
                        .HasColumnName("U_IDENTIFIANT");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_PAYS");

                    b.Property<string>("RaisonSocial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_RAISON_SOCIAL");

                    b.Property<int>("Telephone")
                        .HasMaxLength(8)
                        .HasColumnType("int")
                        .HasColumnName("U_TELEPHONE");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("U_VILLE");

                    b.HasKey("Id");

                    b.ToTable("CLIENTS");
                });
#pragma warning restore 612, 618
        }
    }
}
